
#include "knopa_json.h"

// delete json object
void JsonDeleteObject ( t_JsonObject* p, uint8 keep_obj )
{
  if (p->next) JsonDeleteObject( p->next, 0 );
  JsonDeleteValue( p->value );
  if (!keep_obj) os_free(p);
}

// delete json value
void JsonDeleteValue ( t_JsonValue* p )
{
  if (p->next) JsonDeleteValue( p->next );
  if (p->type==JSON_STRING) os_free(p->str);
  if (p->type==JSON_OBJECT) JsonDeleteObject(p->obj,0);
  if (p->type==JSON_ARRAY)  JsonDeleteArray(p->arr);
  os_free(p);
}

// delete json array
void JsonDeleteArray ( t_JsonArray* p )
{
  JsonDeleteValue( p->val );
  os_free(p);
}

//
void JsonizeUrlParams ( t_JsonObject* obj, char* p )
{
  t_JsonObject* j = obj;
  t_JsonValue* v;
  char* d;
  uint16 len;

  while (*p!=' ' && *p) {
    // param
    p = CopyToTerm(obj->param, p, '&', ' ', 16);
    // value
    v = (t_JsonValue*)os_malloc(sizeof(t_JsonValue));
    v->type = JSON_STRING;
    d = p;
    while (*d!=' ' && *d!='&' && *d) d++;
    len = d-p;
    v->str = (char*)os_malloc(len);
    os_memcpy(v->str, p, len);
    *(v->str+len) = 0;
    p = d;
    j->value = v;
    if (*p=='&') { p++; j->next = (t_JsonObject*)os_malloc(sizeof(t_JsonObject)); j = j->next; } else j->next = 0;
  }
}
